#! /usr/bin/env node

var Config = require('../lib/config.js');
var parseArgs  = require('minimist');
var inquirer = require("inquirer");
var fs = require('fs');
var _ = require('underscore');
var chalk = require('chalk');
var osHomedir = require('os-homedir');
var qu = require('../lib/question.js');
var TT = require('../lib/twit.js');
var util = require('../lib/util.js');
var forever = require('forever');
var path = require('path');

var conf = Config(osHomedir(),'.twitbotrc'),
	args = parseArgs(process.argv);
	cmd  = args._;

switch(cmd[2]) {
    case "new" :
    case "N" :
         inquirer.prompt( qu.config, function( answers ) {
              answers.blacklist=[],
              answers.followerlist=[];
			  conf.set(answers.username,answers);
		});
        break;
    case "start":
    case "S" :
        if(conf.list().length > 0){
            var ques = qu.start;
            ques[0].choices =conf.list();
            inquirer.prompt(ques, function( answers ) {
                
                var name = answers.select_account; 
                var confd = conf.get(name);
                var T = new TT({consumer_key:confd.Consumer_Key,consumer_secret:confd.Consumer_Secret,access_token:confd.Access_Token,access_token_secret:confd.Access_Token_Secret});
                
                T.FullSearch({q:answers.keyword,count:answers.takip_sayi, lang:confd.lang}).then(function(data){
                      data = data.slice(0,answers.takip_sayi);
                       
                      var userlist = util.SelectData(data,confd.blacklist,'user');
                      var twetlist = util.SelectData(data,confd.blacklist,'id');
                       
                      var dump =[T.FullUserFollow(userlist)];
                      if(answers.favorite =="Evet"){
                        dump.push(T.FullUserFavorite(twetlist));
                      } 

                      return Promise.all(dump);
                }).then(function(data){ 
                     var FollowCount = util.FollowCheck(data[0]);
                     if(data.length > 0){ 
                        var FavoriteCount = util.FavoriteCheck(data[1]);
                     }
                     console.log(chalk.green('  İşlemleri tamamladık..'));
                     console.log(chalk.green('  '+FollowCount +' Kişi Takip Edildi.')); 
                     if(data.length > 0){     
                     console.log(chalk.green('  '+FavoriteCount +' Tweete Favori Eklendi.'));
                     }

                     return T.Blocks();
                }).then(function(blacklist){
                    confd.blacklist=_.uniq(blacklist.ids);
                    conf.set(confd.username,confd);
                }).catch(function(Err){
                  console.log(Err);
                });

            });
        }else{
           console.log(chalk.red('Önce Bir hesap tanımlamalısınız [ > twitbot new]'));
        }
        break;
    case "blacklist" :
    case "B" :
     	if(conf.list().length > 0){
            var ques = qu.blacklist;
            ques[0].choices =conf.list();
            inquirer.prompt(ques, function( answers ) {
                var name = answers.select_account;
                var SearchName=answers.blacklist_username;
                var confd = conf.get(name);
                var T = new TT({consumer_key:confd.Consumer_Key,consumer_secret:confd.Consumer_Secret,access_token:confd.Access_Token,access_token_secret:confd.Access_Token_Secret});

                T.UserLookup({screen_name:SearchName})
                .then(function(data){
                      if(typeof(data.id_str) == "undefined" && data.code == 50){
                        return null;
                      }else{
                        return T.BlockCreate({user_id:data[0].id_str});
                      }

                }).then(function(respons){
                   if(respons == null ){
                    console.log(chalk.red('Bu kullanıcı Adına ait hesap bulamadık, doğru yazdığınızdan emin olun.'));
                        return null;
                   }else{
                      console.log(chalk.green('   '+util.Hal(respons.screen_name,'i') +" yasaklılar listesine ekledik.."));
                      return T.Blocks();
                   }    
                }).then(function(blacklist){
                    if(blacklist != null){
                      confd.blacklist=_.uniq(blacklist.ids);
                      conf.set(confd.username,confd);
                    }
                }).catch(function(Err){
                  console.log(Err.stack);
                });

            });
        }else{
           console.log(chalk.red('Önce Bir hesap tanımlamalısınız [ > twitbot new]'));
        }
     	break;
    case "live" :
    case "L" :
        var notification = args.notification ? args.notification : null;
        if(conf.list().length > 0){
            var ques = qu.live;
            ques[0].choices =conf.list();
            inquirer.prompt(ques, function( answers ) {
                var name = answers.select_account;
                var confd = conf.get(name);
                var T = new TT({consumer_key:confd.Consumer_Key,consumer_secret:confd.Consumer_Secret,access_token:confd.Access_Token,access_token_secret:confd.Access_Token_Secret});
                var keywords=null;
                if(typeof(answers.keywords)  !== "object"){
                    keywords = answers.keywords.split(',');
                }else{
                    keywords = answers.keywords;
                }

                var stream = T.Stream({ track: keywords, language:confd.lang })
                console.log('   '+chalk.bgCyan.bold.inverse.white('  TWİTBOT CANLI TAKİP ⚫ '));
                stream.on('tweet', function (tweet) {
                    T.StreamAction(tweet,name,notification,answers.favorite);
                });

                stream.on('disconnect', function (disconnectMessage) {
                  console.log(chalk.red('Bağlantı koptuğu için canlı takip sonlandı'));
                  process.exit(1);
                });
               

            });
        }else{
           console.log(chalk.red('Önce Bir hesap tanımlamalısınız [ > twitbot new]'));
        }
        break;
    case "forever" :
    case "F" :
      
      if(args.stop){
        forever.list(false,function(err,_process){

          var twitbot = util.ForeverCheck(_process);
          
          if(twitbot.length > 0){
             forever.stopbypid(twitbot.pid);
          }
        
        });
      }
      else{

        var notification = args.notification ? args.notification : null;
        if(conf.list().length > 0){
          var ques = qu.live;
            ques[0].choices =conf.list();
            inquirer.prompt(ques, function( answers ) {
                var name = answers.select_account;
                var confd = conf.get(name);

                var keywords=null;
                if(typeof(answers.keywords)  !== "object"){
                    keywords = answers.keywords.split(',');
                }else{
                    keywords = answers.keywords;
                }


                var monitor = forever.startDaemon(path.join(__dirname,'../lib/worker.js'),{
                  uid:"twitbot",args:['--keywords='+keywords.toString(),
                                      '--favorite='+answers.favorite,
                                      '--notification='+notification,
                                      '--name='+name]});
                
            });

        }else{
           console.log(chalk.red('Önce Bir hesap tanımlamalısınız [ > twitbot new]'));
        }
       
      }

      break;
    case "flush" :
    case "FL" :
     	conf.flush();
    	break;
    case "unfollow" :
    case "U" :
        if(conf.list().length > 0){
            var ques = qu.accountlist;
            ques[0].choices = conf.list();
            inquirer.prompt(ques, function( answers ) {
                 var name = answers.select_account; 
                 var confd = conf.get(name);
                 var T = new TT({consumer_key:confd.Consumer_Key,consumer_secret:confd.Consumer_Secret,access_token:confd.Access_Token,access_token_secret:confd.Access_Token_Secret});

                 T.NotFollowingList().then(function(data){
                   return T.FullUserDestroy(data);
                 }).then(function(){
                    console.log(chalk.green('   '+util.Hal(name,'i')+" takip etmeyen kullanıcıları unfollow ettik.."));
                 }).catch(function(err){
                    console.log(err);
                 });
            });
        }else{
           console.log(chalk.red('Önce Bir hesap tanımlamalısınız [ > twitbot new]'));
        }
        break;
    case "version":
    case "V":
        console.log(require('../package.json').version);
        break;
    case "help":
    case "H":
        util.help();
        break;
    default:
    util.help();
}



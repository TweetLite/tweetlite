#! /usr/bin/env node

var nconf = require('nconf');
var parseArgs  = require('minimist');
var inquirer = require("inquirer");
var fs = require('fs');
var _ = require('underscore');
var clor = require('clor');
var osHomedir = require('os-homedir');
var qu = require('../lib/question.js');
var TT = require('../lib/twit.js');
var util = require('../lib/util.js');
var forever = require('forever');
var path = require('path');

nconf.file({ file: path.join(osHomedir(),'.twitbotrc') });

var	args = parseArgs(process.argv);
	  cmd  = args._;


switch(cmd[2]) {
    case "new" :
    case "N" :
         inquirer.prompt( qu.config, function( answers ) {
        nconf.set('users:'+answers.username,answers);
        nconf.save(function (err) {
          if(err) console.error(err)
          else console.log(`  ${clor.green('İşlemleri tamamladık..')}`);
        });
		});
        break;
    case "start":
    case "S" :
        if(_.allKeys(nconf.get('users')).length > 0){
            var ques = qu.start;
            ques[0].choices =_.allKeys(nconf.get('users'));
            inquirer.prompt(ques, function( answers ) {
                
                var name = answers.select_account; 
                var confd = nconf.get('users:'+name);
                var T = new TT({consumer_key:confd.Consumer_Key,consumer_secret:confd.Consumer_Secret,access_token:confd.Access_Token,access_token_secret:confd.Access_Token_Secret});
                
                T.FullSearch({q:answers.keyword,count:answers.takip_sayi, lang:confd.lang}).then(function(data){
                  
                  data = data.slice(0,answers.takip_sayi);
                  return Promise.all([data,T.Blocks(),T.Friends()]);

                }).then(function(data){ 
                  
                     var Twetlist = data[0];
                     var Blacklist = data[1];
                     var Friendslist = data[2];

                  var userlist = util.SelectData(Twetlist,Blacklist.ids,'user');
                  var twetlist = util.SelectData(Twetlist,Blacklist.ids,'id_str');
                    userlist = _.filter(userlist,function(item){
                             return !_.contains(Friendslist, item.id);
                         });
                    

                       

                    var list =[];
                    if(answers.takip =="Evet"){
                      list.push(T.FullUserFollow(userlist));
                    }
                    if(answers.favorite =="Evet"){
                      list.push(T.FullUserFavorite(twetlist));
                    }   

                       return Promise.all(list);
                }).then(function(data){
                    
                    console.log(`  ${clor.green('  İşlemleri tamamladık..')}`);
                    if(answers.takip =="Evet" && answers.favorite =="Hayır"){
                      var FollowCount = util.FollowCheck(data[0]);
                      console.log(`  ${clor.yellow(FollowCount + " Kişi Takip Edildi.")}`);
                    }

                    if(answers.favorite =="Evet" && answers.takip =="Hayır"){
                       var FavoriteCount = util.FavoriteCheck(data[0]);
                       console.log(`  ${clor.yellow(FavoriteCount + " Tweete Favori Eklendi.")}`);
                    }

                    if(answers.takip =="Evet" && answers.favorite =="Evet"){
                      var FollowCount = util.FollowCheck(data[0]);
                      var FavoriteCount = util.FavoriteCheck(data[1]);
                      console.log(`  ${clor.yellow(FollowCount + " Kişi Takip Edildi.")}`);
                      console.log(`  ${clor.yellow(FavoriteCount + " Tweete Favori Eklendi.")}`);
                    }
                }).catch(function(Err){
                  console.log(Err);
                });

            });
        }else{
           console.log(`${clor.red('Önce Bir hesap tanımlamalısınız [ > twitbot new]')}`);
        }
        break;
    case "blacklist" :
    case "B" :
     	if(_.allKeys(nconf.get('users')).length > 0){
            var ques = qu.blacklist;
            ques[0].choices =_.allKeys(nconf.get('users'));
            inquirer.prompt(ques, function( answers ) {
                var name = answers.select_account;
                var SearchName=answers.blacklist_username;
                var confd = nconf.get('users:'+name);
                var T = new TT({consumer_key:confd.Consumer_Key,consumer_secret:confd.Consumer_Secret,access_token:confd.Access_Token,access_token_secret:confd.Access_Token_Secret});

                T.UserLookup({screen_name:SearchName})
                .then(function(data){
                      if(typeof(data.id_str) == "undefined" && data.code == 50){
                        return null;
                      }else{
                        return T.BlockCreate({user_id:data[0].id_str});
                      }

                }).then(function(respons){
                   if(respons == null ){
                   console.log(`  ${clor.yellow('Bu kullanıcı Adına ait hesap bulamadık, doğru yazdığınızdan emin olun.')}`); 
                        return null;
                   }else{ 
                      console.log(`  ${clor.green(util.Hal(respons.screen_name,'i') +" yasaklılar listesine ekledik..")}`); 
                      return T.Blocks();
                   }    
                }).catch(function(Err){
                  console.log(Err);
                });

            });
        }else{
           console.log(`${clor.red('Önce Bir hesap tanımlamalısınız [ > twitbot new]')}`); 
        }
     	break;
    case "live" :
    case "L" :
        var notification = args.notification ? args.notification : null;
        if(_.allKeys(nconf.get('users')).length > 0){
            var ques = qu.live;
            ques[0].choices =_.allKeys(nconf.get('users'));
            inquirer.prompt(ques, function( answers ) {
                var name = answers.select_account;
                var confd = nconf.get('users:'+name);
                var T = new TT({consumer_key:confd.Consumer_Key,consumer_secret:confd.Consumer_Secret,access_token:confd.Access_Token,access_token_secret:confd.Access_Token_Secret});
                var keywords=null;
                if(typeof(answers.keywords)  !== "object"){
                    keywords = answers.keywords.split(',');
                }else{
                    keywords = answers.keywords;
                }

                var stream = T.Stream({ track: keywords, language:confd.lang })
                console.log(`   ${clor.bgCyan.bold.inverse.white('  TWİTBOT CANLI TAKİP ⚫ ')}`);
                stream.on('tweet', function (tweet) {
                    T.StreamAction(tweet,notification,answers.favorite,answers.takip);
                });

                stream.on('disconnect', function (disconnectMessage) {
                  console.log(`${clor.red('Bağlantı koptuğu için canlı takip sonlandı')}`);
                  process.exit(1);
                });
               

            });
        }else{
           console.log(`${clor.red('Önce Bir hesap tanımlamalısınız [ > twitbot new]')}`);
        }
        break;
    case "forever" :
    case "F" :
      if(_.allKeys(nconf.get('users')).length >0){

         if(args.stop){
          forever.list(false,function(err,_process){

              var twitbot = util.ForeverCheck(_process);
              
               if(twitbot.length > 0){

                  var plist = _process.map(function(item){
                    return{
                      foreverPid:item.foreverPid,
                      pid:item.pid,
                      uid:item.uid,
                      name:item.uid.split('_')[1]
                    }
                  });

                  var ques = qu._process;
                  ques[0].choices =_.pluck(plist, 'name');
                  inquirer.prompt(ques, function( answers ) {
                       forever.stopbypid(_.pluck(_.filter(plist,function(item){ 
                        return item.name === answers.select_pid; 
                        }
                        ), 'pid')[0]);
                       console.log(`${clor.green('Arkplanda çalışan bot durduruldu. [ > twitbot F]')}`); 
                  })
               }else{
                 console.log(`${clor.red('Arkplanda çalışan bot yok. [ > twitbot F]')}`); 
               }
            
          
          });
        }else{
          var ques = qu.live;
              ques[0].choices =_.allKeys(nconf.get('users'));
              inquirer.prompt(ques, function( answers ) {
                  var name = answers.select_account;
                  var confd = nconf.get('users:'+name);

                  var keywords=null;
                  if(typeof(answers.keywords)  !== "object"){
                      keywords = answers.keywords.split(',');
                  }else{
                      keywords = answers.keywords;
                  }


                  var monitor = forever.startDaemon(path.join(__dirname,'../lib/worker.js'),{
                    uid:"twitbot_"+name,args:['--keywords='+keywords.toString(),
                                        '--favorite='+answers.favorite,
                                        '--notification='+notification,
                                        '--name='+name,
                                        '--takip='+answers.takip]});
                  
              });

        }

      }else{
        console.log(`${clor.red('Önce Bir hesap tanımlamalısınız [ > twitbot new]')}`); 
      }
      
      break;
    case "flush" :
    case "FL" :
     	 nconf.remove('users');
       nconf.save(function (err) {
          if(err) console.error(err)
          console.log(`  ${clor.green('İşlemleri tamamladık..')}`); 
       });
    	break;
    case "unfollow" :
    case "U" :
        if(_.allKeys(nconf.get('users')).length > 0){
            var ques = qu.accountlist;
            ques[0].choices = _.allKeys(nconf.get('users'));
            inquirer.prompt(ques, function( answers ) {
                 var name = answers.select_account; 
                 var confd = nconf.get('users:'+name);
	               var T = new TT({consumer_key:confd.Consumer_Key,consumer_secret:confd.Consumer_Secret,access_token:confd.Access_Token,access_token_secret:confd.Access_Token_Secret});

                 T.NotFollowingList().then(function(data){
                   return T.FullUserDestroy(data);
                 }).then(function(){
                    console.log(`  ${clor.green(util.Hal(name,'i')+" takip etmeyen kullanıcıları unfollow ettik..")}`); 
                 }).catch(function(err){
                    console.log(err);
                 });
            });
        }else{
           console.log(`${clor.red('Önce Bir hesap tanımlamalısınız [ > twitbot new]')}`); 
        }
        break;
    case "mesaj":
    case "M":
        if(_.allKeys(nconf.get('users')).length > 0){
            var ques = qu.messagelist;
            ques[0].choices =_.allKeys(nconf.get('users'));
            inquirer.prompt(ques, function( answers ) {
                
                var name = answers.select_account; 
                var confd = nconf.get('users:'+name);
                var T = new TT({consumer_key:confd.Consumer_Key,consumer_secret:confd.Consumer_Secret,access_token:confd.Access_Token,access_token_secret:confd.Access_Token_Secret});
                
                if(answers.send =="Evet" && answers.message){
                    T.Followers()
                   .then(function(data){
                      data = data.ids.slice(0,answers.limit);
                      return T.FullUserMessage(data,answers.message)
                    }).then(function(respons){
                        var MessageCount = respons.length;
                        console.log(`  ${clor.green(MessageCount +' Kişiye mesaj gönderildi.')}`); 
                    }).catch(function(err){
                        console.error(err);
                    });
                }else{ 
                    console.log(`${clor.red('Mesaj atmaya karar verdiğinde tekrar gel..')}`); 
                }

            });
        }else{
          console.log(`${clor.red('Önce Bir hesap tanımlamalısınız [ > twitbot new]')}`);
        }
    break;
    case "version":
    case "V":
        console.log(require('../package.json').version);
        break;
    case "help":
    case "H":
        util.help();
        break;
    default:
    util.help();
}



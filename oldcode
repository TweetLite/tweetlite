	case 'live' :
		if (_.keys(nconf.get('users')).length > 0) {
			const ques = live;
			ques[0].choices = _.keys(nconf.get('users'));
			inquirer.prompt(ques, answers => {
				const name = answers.select_account;
				const confd = nconf.get(`users:${name}`);
				const T = new TT(confd);

				let keywords = null;
				if (typeof answers.keywords === 'object') {
					keywords = answers.keywords;
				} else {
					keywords = answers.keywords.split(',');
				}

				const stream = T.stream({track: keywords, language: confd.lang});

				spinnerMsg(`TWİTBOT LİVE TRACKİNG`, true);

				stream.on('tweet', tweet => {
					T.streamAction(tweet, notification, answers.favorite, answers.takip);
				});

				stream.on('disconnect', disconnectMessage => {
					console.log(`${clor.red('It ended the connection was lost to follow live')}`);
					console.error(disconnectMessage);
					stream.start();
				});
			});
		} else {
			console.log(`${clor.red('First, you must define an account  [ > twitbot new]')}`);
		}
		break;
	case 'forever' :
		if (_.keys(nconf.get('users')).length > 0) {
			if (args.stop) {
				forever.list(false, (err, _process) => {
					if (err) {
						console.error(err);
						return;
					}

					const twitbot = foreverCheck(_process);

					if (twitbot.length > 0) {
						const plist = _process.map(item => {
							return {
								foreverPid: item.foreverPid,
								pid: item.pid,
								uid: item.uid,
								name: item.uid.split('_')[1]
							};
						});

						const ques = __process;
						ques[0].choices = _.pick(plist, 'name');
						inquirer.prompt(ques, answers => {
							forever.stopbypid(_.pick(_.filter(plist, item => {
								return item.name === answers.select_pid;
							}), 'pid')[0]);

							console.log(`${clor.green('Background stopped working bots. [ > twitbot F ]')}`);
						});
					} else {
						console.log(`${clor.red('Background not working bots. [ > twitbot F ]')}`);
					}
				});
			} else {
				const ques = live;
				ques[0].choices = _.keys(nconf.get('users'));
				inquirer.prompt(ques, answers => {
					const name = answers.select_account;

					let keywords = null;
					if (typeof answers.keywords === 'object') {
						keywords = answers.keywords;
					} else {
						keywords = answers.keywords.split(',');
					}

					forever.startDaemon(path.join(__dirname, './worker.js'), {
						uid: `twitbot_${name}`,
						append: true,
						args:
						[`--keywords=${keywords.toString()}`,
						`--favorite=${answers.favorite}`,
						`--notification=${notification}`,
						`--name=${name}`,
						`--takip=${answers.takip}`]
					});
				});
			}
		} else {
			console.log(`${clor.red('First, you must define an account  [ > twitbot new ]')}`);
		}
		break;


		case 'watch':
			if (_.keys(nconf.get('users')).length > 0) {
				const ques = live;
				ques[0].choices = _.keys(nconf.get('users'));
				inquirer.prompt(ques, answers => {
					const name = answers.select_account;
					const confd = nconf.get(`users:${name}`);
					const T = new TT(confd);

					let keywords = null;
					if (typeof answers.keywords === 'object') {
						keywords = answers.keywords;
					} else {
						keywords = answers.keywords.split(',');
					}

					const stream = T.stream({track: keywords, language: confd.lang});
					console.log(`   ${clor.bgCyan.bold.inverse.white('  TWİTBOT LİVE WATCHİNG ⚫ ')}`);

					stream.on('tweet', tweet => {
						T.middleware(modules,tweet, notification, answers.favorite, answers.takip);
					});

					stream.on('disconnect', disconnectMessage => {
						console.log(`${clor.red('It ended the connection was lost to follow live')}`);
						console.error(disconnectMessage);
						process.exit(1);
					});
				});
			} else {
				console.log(`${clor.red('First, you must define an account  [ > twitbot new]')}`);
			}

			break;
		case 'worker':
			if (typeof process.env.twitbotUsername === 'undefined' && typeof process.env.twitbotConsumerKey === 'undefined' && typeof process.env.twitbotConsumerSecret === 'undefined' && typeof process.env.twitbotAccessToken === 'undefined' && typeof process.env.twitbotAccessTokenSecret === 'undefined' && typeof process.env.twitbotlang === 'undefined' && typeof process.env.twitbotFollow === 'undefined' && typeof process.env.twitbotFavorite === 'undefined' && typeof process.env.twitbotKeywords === 'undefined') {
				console.log(`${clor.red('First, you must define an environment ')}`);
			} else if (args.stop) {
				forever.list(false, (err, _process) => {
					if (err) {
						console.error(err);
					} else {
						const twitbot = foreverCheck(_process);
						if (twitbot.length > 0) {
							const plist = _process.map(item => {
								return {
									foreverPid: item.foreverPid,
									pid: item.pid,
									uid: item.uid,
									name: item.uid.split('_')[1]
								};
							});

							const ques = __process;
							ques[0].choices = _.pick(plist, 'name');
							inquirer.prompt(ques, answers => {
								forever.stopbypid(_.pick(_.filter(plist, item => {
									return item.name === answers.select_pid;
								}), 'pid')[0]);
								console.log(`${clor.green('Background stopped working bots. [ > twitbot F ]')}`);
							});
						} else {
							console.log(`${clor.red('Background not working bots. [ > twitbot F ]')}`);
						}
					}
				});
			} else {
				forever.startDaemon(path.join(__dirname, '../worker.js'), {uid: `twitbot_${process.env.twitbotUsername}`});
			}
			break;
